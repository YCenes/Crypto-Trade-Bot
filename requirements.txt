pandas
matplotlib
requests



# ✅ GÜNCELLENMİŞ BACKTEST DOSYASI (SL Buffer, Sabit TP, Engulfing'siz sinyaller, Tümü)

def run_backtest(signals, df, swing_highs, swing_lows, rr_ratio=1.5, max_future_bars=20, sl_buffer=50, tp_fixed=None):
    results = []

    # Tekrarlayan timestamp'lerde sinyal varsa sadece ilkini al
    unique_signals = []
    used_timestamps = set()
    for s in signals:
        if s[0] not in used_timestamps:
            unique_signals.append(s)
            used_timestamps.add(s[0])

    for entry_time, entry_price, direction in unique_signals:
        # Entry index
        entry_index = df.index[df["timestamp"] == entry_time]
        if len(entry_index) == 0:
            continue

        idx = entry_index[0]
        future_df = df.iloc[idx + 1:idx + 1 + max_future_bars]

        # SL noktası = en yakın swing low/high
        swing = None
        if direction == "BUY":
            for t, v in reversed(swing_lows):
                if t < entry_time:
                    swing = v
                    break
        else:  # SELL
            for t, v in reversed(swing_highs):
                if t < entry_time:
                    swing = v
                    break

        if swing is None:
            continue

        # SL'yi buffer ile ayarla
        sl = swing - sl_buffer if direction == "BUY" else swing + sl_buffer

        # TP'yi sabit pip olarak ayarla veya RR ile hesapla
        if tp_fixed:
            tp = entry_price + tp_fixed if direction == "BUY" else entry_price - tp_fixed
        else:
            if direction == "BUY":
                risk = entry_price - sl
                if risk <= 0:
                    continue
                tp = entry_price + (risk * rr_ratio)
            else:  # SELL
                risk = sl - entry_price
                if risk <= 0:
                    continue
                tp = entry_price - (risk * rr_ratio)

        result = "NONE"
        exit_price = None

        for _, row in future_df.iterrows():
            if direction == "BUY":
                hit_sl = row["low"] <= sl
                hit_tp = row["high"] >= tp

                if hit_sl and hit_tp:
                    result = "LOSS" if abs(sl - row["open"]) < abs(tp - row["open"]) else "WIN"
                    exit_price = sl if result == "LOSS" else tp
                    break
                elif hit_sl:
                    result = "LOSS"
                    exit_price = sl
                    break
                elif hit_tp:
                    result = "WIN"
                    exit_price = tp
                    break

            else:  # SELL
                hit_sl = row["high"] >= sl
                hit_tp = row["low"] <= tp

                if hit_sl and hit_tp:
                    result = "LOSS" if abs(sl - row["open"]) < abs(tp - row["open"]) else "WIN"
                    exit_price = sl if result == "LOSS" else tp
                    break
                elif hit_sl:
                    result = "LOSS"
                    exit_price = sl
                    break
                elif hit_tp:
                    result = "WIN"
                    exit_price = tp
                    break

        if result != "NONE":
            results.append({
                "entry_time": entry_time,
                "direction": direction,
                "entry_price": entry_price,
                "exit_price": exit_price,
                "result": result,
                "sl": sl,
                "tp": tp
            })

    return results
